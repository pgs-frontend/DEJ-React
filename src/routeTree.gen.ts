/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutLayoutImport } from './routes/_layout/_layout'
import { Route as LayoutLangIndexImport } from './routes/_layout/$lang/index'
import { Route as LayoutLangTermsServiceImport } from './routes/_layout/$lang/terms-service'
import { Route as LayoutLangPrivacyPolicyImport } from './routes/_layout/$lang/privacy-policy'
import { Route as LayoutLangContactImport } from './routes/_layout/$lang/contact'
import { Route as LayoutLangAboutImport } from './routes/_layout/$lang/about'

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutLayoutRoute = LayoutLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutLangIndexRoute = LayoutLangIndexImport.update({
  id: '/$lang/',
  path: '/$lang/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutLangTermsServiceRoute = LayoutLangTermsServiceImport.update({
  id: '/$lang/terms-service',
  path: '/$lang/terms-service',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutLangPrivacyPolicyRoute = LayoutLangPrivacyPolicyImport.update({
  id: '/$lang/privacy-policy',
  path: '/$lang/privacy-policy',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutLangContactRoute = LayoutLangContactImport.update({
  id: '/$lang/contact',
  path: '/$lang/contact',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutLangAboutRoute = LayoutLangAboutImport.update({
  id: '/$lang/about',
  path: '/$lang/about',
  getParentRoute: () => LayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/_layout/_layout': {
      id: '/_layout/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutLayoutImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/$lang/about': {
      id: '/_layout/$lang/about'
      path: '/$lang/about'
      fullPath: '/$lang/about'
      preLoaderRoute: typeof LayoutLangAboutImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/$lang/contact': {
      id: '/_layout/$lang/contact'
      path: '/$lang/contact'
      fullPath: '/$lang/contact'
      preLoaderRoute: typeof LayoutLangContactImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/$lang/privacy-policy': {
      id: '/_layout/$lang/privacy-policy'
      path: '/$lang/privacy-policy'
      fullPath: '/$lang/privacy-policy'
      preLoaderRoute: typeof LayoutLangPrivacyPolicyImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/$lang/terms-service': {
      id: '/_layout/$lang/terms-service'
      path: '/$lang/terms-service'
      fullPath: '/$lang/terms-service'
      preLoaderRoute: typeof LayoutLangTermsServiceImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/$lang/': {
      id: '/_layout/$lang/'
      path: '/$lang'
      fullPath: '/$lang'
      preLoaderRoute: typeof LayoutLangIndexImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutLayoutRoute: typeof LayoutLayoutRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
  LayoutLangAboutRoute: typeof LayoutLangAboutRoute
  LayoutLangContactRoute: typeof LayoutLangContactRoute
  LayoutLangPrivacyPolicyRoute: typeof LayoutLangPrivacyPolicyRoute
  LayoutLangTermsServiceRoute: typeof LayoutLangTermsServiceRoute
  LayoutLangIndexRoute: typeof LayoutLangIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutLayoutRoute: LayoutLayoutRoute,
  LayoutIndexRoute: LayoutIndexRoute,
  LayoutLangAboutRoute: LayoutLangAboutRoute,
  LayoutLangContactRoute: LayoutLangContactRoute,
  LayoutLangPrivacyPolicyRoute: LayoutLangPrivacyPolicyRoute,
  LayoutLangTermsServiceRoute: LayoutLangTermsServiceRoute,
  LayoutLangIndexRoute: LayoutLangIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutLayoutRoute
  '/': typeof LayoutIndexRoute
  '/$lang/about': typeof LayoutLangAboutRoute
  '/$lang/contact': typeof LayoutLangContactRoute
  '/$lang/privacy-policy': typeof LayoutLangPrivacyPolicyRoute
  '/$lang/terms-service': typeof LayoutLangTermsServiceRoute
  '/$lang': typeof LayoutLangIndexRoute
}

export interface FileRoutesByTo {
  '': typeof LayoutLayoutRoute
  '/': typeof LayoutIndexRoute
  '/$lang/about': typeof LayoutLangAboutRoute
  '/$lang/contact': typeof LayoutLangContactRoute
  '/$lang/privacy-policy': typeof LayoutLangPrivacyPolicyRoute
  '/$lang/terms-service': typeof LayoutLangTermsServiceRoute
  '/$lang': typeof LayoutLangIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/_layout/_layout': typeof LayoutLayoutRoute
  '/_layout/': typeof LayoutIndexRoute
  '/_layout/$lang/about': typeof LayoutLangAboutRoute
  '/_layout/$lang/contact': typeof LayoutLangContactRoute
  '/_layout/$lang/privacy-policy': typeof LayoutLangPrivacyPolicyRoute
  '/_layout/$lang/terms-service': typeof LayoutLangTermsServiceRoute
  '/_layout/$lang/': typeof LayoutLangIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/'
    | '/$lang/about'
    | '/$lang/contact'
    | '/$lang/privacy-policy'
    | '/$lang/terms-service'
    | '/$lang'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/'
    | '/$lang/about'
    | '/$lang/contact'
    | '/$lang/privacy-policy'
    | '/$lang/terms-service'
    | '/$lang'
  id:
    | '__root__'
    | '/_layout'
    | '/_layout/_layout'
    | '/_layout/'
    | '/_layout/$lang/about'
    | '/_layout/$lang/contact'
    | '/_layout/$lang/privacy-policy'
    | '/_layout/$lang/terms-service'
    | '/_layout/$lang/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/_layout"
      ]
    },
    "/_layout": {
      "filePath": "_layout.jsx",
      "children": [
        "/_layout/_layout",
        "/_layout/",
        "/_layout/$lang/about",
        "/_layout/$lang/contact",
        "/_layout/$lang/privacy-policy",
        "/_layout/$lang/terms-service",
        "/_layout/$lang/"
      ]
    },
    "/_layout/_layout": {
      "filePath": "_layout/_layout.jsx",
      "parent": "/_layout"
    },
    "/_layout/": {
      "filePath": "_layout/index.jsx",
      "parent": "/_layout"
    },
    "/_layout/$lang/about": {
      "filePath": "_layout/$lang/about.jsx",
      "parent": "/_layout"
    },
    "/_layout/$lang/contact": {
      "filePath": "_layout/$lang/contact.jsx",
      "parent": "/_layout"
    },
    "/_layout/$lang/privacy-policy": {
      "filePath": "_layout/$lang/privacy-policy.jsx",
      "parent": "/_layout"
    },
    "/_layout/$lang/terms-service": {
      "filePath": "_layout/$lang/terms-service.jsx",
      "parent": "/_layout"
    },
    "/_layout/$lang/": {
      "filePath": "_layout/$lang/index.jsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
